datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(cuid()) @map("_id")
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  teamNumber     Int?
  role           Role      @default(employee)
  department     String?
  existingSkills String[]  @default([])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]

  Feedback Feedback[]
}

enum Role {
  employee
  admin
  manager
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feedback {
  id                           String   @id @default(cuid()) @map("_id")
  createdAt                    DateTime @default(now())
  workSatisfaction             String?
  workLifeBalance              String?
  workSupport                  String?
  interDepartmentCommunication String?
  workRecognition              String?
  toolsSatisfaction            String?
  cultureAlignment             String?
  careerGrowthSatisfaction     String?
  trainingPreference           String?
  developmentOpportunities     String?
  learningPreference           String?
  weakestSkill                 String?
  recognitionSatisfaction      String?
  feedbackFrequency            String?
  recommendCompany             String?
  overallWorkLifeBalance       String?
  teamWorkingRelationship      String?
  enjoymentOfWork              String?
  collaborationChallenges      String?
  workRelatedStressors         String?
  supportWellBeing             String?
  improveExperience            String?
  teamNumber     Int?
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Course {
  id                      String   @id @default(cuid()) @map("_id")
  title                   String
  certificateType         String
  rating                  Float
  difficulty              String
  studentsEnrolled        Float
  overallRating           Float
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}
